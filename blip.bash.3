.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BLIP.BASH 3"
.TH BLIP.BASH 3 "2016-10-04" "blip.bash 0.01" "blip.bash"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
blip.bash \- Bash Library for Indolent Programmers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #!/bin/bash
\& 
\& set \-euo pipefail
\& source /usr/lib/blip.bash
\& 
\& main () {
\&     local name="$(get_gecos_name)"
\&     if get_user_confirmation "Is your name ${name:\-(unknown)}?" ; then
\&         echo "Nice to meet you ${name:\-mystery user}."
\&     else
\&         echo "I\*(Aqll just call you $(get_username) then."
\&     fi
\& }
\& 
\& main "$@"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBblip\fR is a Bash Library for Indolent (lazy) Programmers. It is a bash script that
is intended to be sourced in as a library of common functions to aid development
of shell scripts.
.PP
This project is still in the early stages of development and is expected to
change. However, with the mantra release early, release often, in mind, it
is available in this early state to help solicit feedback and user input.
.PP
Please feel free to contact the author or offer patches to the source.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "abs ()"
.IX Subsection "abs ()"
.SS "absolute ()"
.IX Subsection "absolute ()"
Alias for \f(CW\*(C`abs ()\*(C'\fR.
.SS "append_if_not_present ()"
.IX Subsection "append_if_not_present ()"
.SS "get_date ()"
.IX Subsection "get_date ()"
.SS "get_file_age ()"
.IX Subsection "get_file_age ()"
.SS "get_free_disk_space ()"
.IX Subsection "get_free_disk_space ()"
.SS "get_fs_mounts ()"
.IX Subsection "get_fs_mounts ()"
.SS "get_gecos_info ()"
.IX Subsection "get_gecos_info ()"
.SS "get_gecos_name ()"
.IX Subsection "get_gecos_name ()"
.SS "get_max_length ()"
.IX Subsection "get_max_length ()"
.SS "get_string_characters ()"
.IX Subsection "get_string_characters ()"
.SS "get_unixtime ()"
.IX Subsection "get_unixtime ()"
.SS "get_user_confirmation ()"
.IX Subsection "get_user_confirmation ()"
See also: \f(CW\*(C`select\*(C'\fR bash built-in.
.SS "get_username ()"
.IX Subsection "get_username ()"
.SS "get_user_selection ()"
.IX Subsection "get_user_selection ()"
See also: \f(CW\*(C`select\*(C'\fR bash built-in.
.SS "is_abs_int ()"
.IX Subsection "is_abs_int ()"
.SS "is_absolute_integer ()"
.IX Subsection "is_absolute_integer ()"
Alias for \f(CW\*(C`is_abs_int ()\*(C'\fR.
.SS "is_boolean ()"
.IX Subsection "is_boolean ()"
.SS "is_false ()"
.IX Subsection "is_false ()"
Return \f(CW0\fR \fItrue\fR if \f(CW$ARG1\fR may be considered boolean false by a
human. Values to be considered true include: \f(CW0\fR, \f(CW\*(C`false\*(C'\fR, \f(CW\*(C`no\*(C'\fR, \f(CW\*(C`off\*(C'\fR,
\&\f(CW\*(C`disable\*(C'\fR and \f(CW\*(C`disabled\*(C'\fR.
.SS "is_in_path ()"
.IX Subsection "is_in_path ()"
.ie n .SS "is_int ""$ARG1"""
.el .SS "is_int ``$ARG1''"
.IX Subsection "is_int $ARG1"
Return \f(CW0\fR \fItrue\fR if \f(CW$ARG1\fR is an integer value.
.SS "is_integer ()"
.IX Subsection "is_integer ()"
Alias for \f(CW\*(C`is_int ()\*(C'\fR.
.ie n .SS "is_true ""$ARG1"""
.el .SS "is_true ``$ARG1''"
.IX Subsection "is_true $ARG1"
Return \f(CW0\fR \fItrue\fR if \f(CW$ARG1\fR may be considered boolean true by a
human. Values to be considered true include: \f(CW1\fR, \f(CW\*(C`true\*(C'\fR, \f(CW\*(C`yes\*(C'\fR, \f(CW\*(C`on\*(C'\fR,
\&\f(CW\*(C`enable\*(C'\fR and \f(CW\*(C`enabled\*(C'\fR.
.SS "is_word_in_string ()"
.IX Subsection "is_word_in_string ()"
.SS "to_lower ()"
.IX Subsection "to_lower ()"
.SS "to_upper ()"
.IX Subsection "to_upper ()"
.ie n .SS "url_exists ""$URL"""
.el .SS "url_exists ``$URL''"
.IX Subsection "url_exists $URL"
Return \f(CW0\fR \fI(true)\fR if \f(CW$URL\fR exists, as determined by a 2XX \s-1HTTP\s0 response
code. Otherwise returns \f(CW1\fR \fI(false)\fR.
Requires the \f(CW\*(C`curl\*(C'\fR command to be present in the shell search path.
.ie n .SS "url_http_header ""$URL"""
.el .SS "url_http_header ``$URL''"
.IX Subsection "url_http_header $URL"
Outputs (echos to \f(CW\*(C`STDOUT\*(C'\fR) the full \s-1HTTP\s0 response headers returned by the remote
web server for \f(CW$URL\fR.
Requires the \f(CW\*(C`curl\*(C'\fR command to be present in the shell search path.
.ie n .SS "url_http_response_code ""$URL"""
.el .SS "url_http_response_code ``$URL''"
.IX Subsection "url_http_response_code $URL"
Outputs (echos to \f(CW\*(C`STDOUT\*(C'\fR) the \s-1HTTP\s0 response code returned by the remote
web server for \f(CW$URL\fR.
Requires the \f(CW\*(C`curl\*(C'\fR command to be present in the shell search path.
.SH "VARIABLES"
.IX Header "VARIABLES"
.SS "\s-1BLIP_VERSION\s0"
.IX Subsection "BLIP_VERSION"
Contains the version of \fBblip\fR as a string value.
.PP
Example: \f(CW\*(C`0.01\-3\-prerelease\*(C'\fR
.SS "\s-1BLIP_VERSINFO\s0"
.IX Subsection "BLIP_VERSINFO"
A 4\-element array containing version information about the version of \fBblip\fR.
.PP
Example:
.PP
.Vb 4
\& BLIP_VERSINFO[0] = 0          # Major version number
\& BLIP_VERSINFO[1] = 01         # Minor version number
\& BLIP_VERSINFO[2] = 3          # Patch / release number
\& BLIP_VERSINFO[3] = prerelease # Release status
.Ve
.SS "\s-1ANSI, &\s0 ANSI_*"
.IX Subsection "ANSI, & ANSI_*"
These variables contain common \s-1ANSI\s0 terminal colour codes.
.PP
A list of all keys within the \f(CW\*(C`ANSI\*(C'\fR associative array may be obtained
through the following code example:
.PP
.Vb 3
\& BLIP_ANSI_VARIABLES=1
\& source /usr/lib/blip.bash
\& echo "${!ANSI[@]}"
.Ve
.PP
See also \s-1BLIP_ANSI_VARIABLES\s0 in the \s-1ENVIRONMENT\s0 section below.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1BLIP_ALLOW_FOREIGN_SHELLS\s0"
.IX Subsection "BLIP_ALLOW_FOREIGN_SHELLS"
When set to \f(CW1\fR, inhibits \f(CW\*(C`exit\*(C'\fR functionality to abort operation
when \fBblip\fR determines that it is not running inside a bash shell interpreter.
.SS "\s-1BLIP_REQUIRE_VERSION\s0"
.IX Subsection "BLIP_REQUIRE_VERSION"
Specifies the minimum version of \fBblip\fR required by the calling parent script.
\&\fBblip\fR will \f(CW\*(C`exit\*(C'\fR with a non-zero (\f(CW2\fR) return code if the
\&\f(CW\*(C`${BLIP_VERSINFO[@]}\*(C'\fR array does not indicate a version that is equal to
or greater.
.PP
Example:
.PP
.Vb 2
\& BLIP_REQUIRE_VERSION="0.02\-13"
\& source /usr/lib/blip.bash
.Ve
.SS "\s-1BLIP_ANSI_VARIABLES\s0"
.IX Subsection "BLIP_ANSI_VARIABLES"
When set to \f(CW1\fR, causes \fBblip\fR to declare read-only variables containing
common \s-1ANSI\s0 terminal colour codes. All declared variable names being with
the prefix \f(CW\*(C`ANSI_\*(C'\fR, with the excption of one associative array which is
simply \f(CW\*(C`ANSI\*(C'\fR.
.PP
A list of all declared \s-1ANSI\s0 variables may be obtained through the following
code example:
.PP
.Vb 3
\& BLIP_ANSI_VARIABLES=1
\& source /usr/lib/blip.bash
\& compgen \-A variable | grep ANSI
.Ve
.PP
See also: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
.SS "\s-1BLIP_EXTERNAL_CMD_CURL\s0"
.IX Subsection "BLIP_EXTERNAL_CMD_CURL"
Specifies an explicit command path when executing the external dependency
command \f(CW\*(C`curl\*(C'\fR. Defaults to \f(CW\*(C`curl\*(C'\fR without an explicit path in order to
search \f(CW$PATH\fR.
.SS "\s-1BLIP_EXTERNAL_CMD_DATE\s0"
.IX Subsection "BLIP_EXTERNAL_CMD_DATE"
Specifies an explicit command path when executing the external dependency
command \f(CW\*(C`date\*(C'\fR. Defaults to \f(CW\*(C`date\*(C'\fR without an explicit path in order to
search \f(CW$PATH\fR.
.SS "\s-1BLIP_EXTERNAL_CMD_GREP\s0"
.IX Subsection "BLIP_EXTERNAL_CMD_GREP"
Specifies an explicit command path when executing the external dependency
command \f(CW\*(C`grep\*(C'\fR. Defaults to \f(CW\*(C`grep\*(C'\fR without an explicit path in order to
search \f(CW$PATH\fR.
.SS "\s-1BLIP_EXTERNAL_CMD_EGREP\s0"
.IX Subsection "BLIP_EXTERNAL_CMD_EGREP"
Specifies an explicit command path when executing the external dependency
command \f(CW\*(C`egrep\*(C'\fR. Defaults to \f(CW\*(C`egrep\*(C'\fR without an explicit path in order to
search \f(CW$PATH\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicola Worthington <nicola@tfb.net>.
.SH "URLS"
.IX Header "URLS"
<https://nicolaw.uk/blip>, <https://github.com/neechbear/blip/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://github.com/akesterson/cmdarg> \- A pure bash library to
make argument parsing far less troublesome.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2016 Nicola Worthington.
.PP
This software is released under the \s-1MIT\s0 License.
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \*(L"Software\*(R"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
